import { expect, test } from "@playwright/test";
import { ManufacturerPage } from "../pages/manufacturer-page";
import { ManufacturerData, ManufacturerFilterTestCase } from "../utils/manufacturer-data";

test.describe("L·ªçc s·∫£n ph·∫©m theo nh√† s·∫£n xu·∫•t", () => {
    for (const testCase of ManufacturerData) {
            test(`${testCase.id} - ${testCase.description}`, async ({ page }) => {
    
                const manufacturerPage = new ManufacturerPage(page);
                
                await manufacturerPage.navigateToHome();
                await manufacturerPage.gotoSanPhamPage();
    
                const initialCount = await manufacturerPage.getVisibleProductCount();
    
                // üëâ B∆∞·ªõc 1: Ch·ªçn ch·∫•t li·ªáu ban ƒë·∫ßu
                await manufacturerPage.selectManufacturer(...testCase.initialSelection);
                await manufacturerPage.waitForProductCountToChange(initialCount);
    
                const afterFirstSelectionCount = await manufacturerPage.getVisibleProductCount();
                expect(afterFirstSelectionCount).toBeGreaterThanOrEqual(0); // √≠t nh·∫•t v·∫´n n√™n ki·ªÉm
    
                // üëâ B∆∞·ªõc 2: N·∫øu c√≥ unselect v√† ch·ªçn l·∫°i ch·∫•t li·ªáu kh√°c
                if (testCase.unselectAfter && testCase.reselect) {
                    await manufacturerPage.unselectManufacturer(...testCase.initialSelection);
                    const countAfterUnselect = await manufacturerPage.getVisibleProductCount();
    
                    await manufacturerPage.selectManufacturer(...testCase.reselect);
                    await manufacturerPage.waitForProductCountToChange(countAfterUnselect);
    
                    const finalCount = await manufacturerPage.getVisibleProductCount();
                    expect(finalCount).toBeGreaterThanOrEqual(0);
                }
    
                await page.close();
            });
    
        }
})